#import { UserFieldsWithEmail } from '../fragments/user.gql'

mutation PostComment(
	$ideaComment: idea_comments_insert_input!
	$ideaId: uuid!
) {
	addIdeaComment: insert_idea_comments_one(object: $ideaComment) {
		id
		ideaId
		user {
			displayName
			avatarUrl
		}
	}
	updateIdeaTotalComments: update_ideas_by_pk(
		pk_columns: { id: $ideaId }
		_inc: { totalComments: 1 }
	) {
		id
	}
}

mutation PostReply(
	$ideaReply: idea_comment_replies_insert_input!
	$commentId: uuid!
) {
	addIdeaReply: insert_idea_comment_replies_one(object: $ideaReply) {
		commentId
		id
		value
	}
	update_idea_comments_by_pk(
		pk_columns: { id: $commentId }
		_inc: { totalReplies: 1 }
	) {
		id
	}
}

fragment CommentFields on v_comments {
	id
	updatedAt
	value
	ideaId
	totalReplies
	isBoost
	status
	user {
		...UserFieldsWithEmail
	}
	firstReplies: replies(limit: 2, order_by: { updatedAt: desc }) {
		id
		commentId
		value
		updatedAt
		user {
			...UserFieldsWithEmail
		}
	}
}

query CommentsForIdea($ideaId: uuid!, $offset: Int) {
	comments: v_comments(
		where: { ideaId: { _eq: $ideaId } }
		order_by: { updatedAt: desc }
		offset: $offset
		limit: 8
	) {
		...CommentFields
	}
	totalComments: v_comments_aggregate(where: { ideaId: { _eq: $ideaId } }) {
		aggregate {
			count(columns: id)
		}
	}
}

# query CommentsForIdea($ideaId: uuid!, $offset: Int) {
# 	comments: idea_comments(
# 		where: { ideaId: { _eq: $ideaId } }
# 		order_by: { updatedAt: desc, isBoost: desc }
# 		offset: $offset
# 		limit: 8
# 	) {
# 		...CommentFields
# 	}
# 	totalComments: idea_comments_aggregate(
# 		where: { ideaId: { _eq: $ideaId } }
# 	) {
# 		aggregate {
# 			count(columns: id)
# 		}
# 	}
# }

# query CommentsForIdea($first: Int!, $after: String!, $ideaId: uuid!) {
# 	idea_comments_connection(
# 		first: $first
# 		after: $after
# 		order_by: { updated_at: desc }
# 		where: { idea_id: { _eq: $ideaId } }
# 	) {
# 		pageInfo {
# 			endCursor
# 			hasNextPage
# 		}
# 		edges {
# 			node {
# 				updated_at
# 				value
# 				user {
# 					first_name
# 					avatar_url
# 				}
# 			}
# 		}
# 	}
# }

query RepliesForComment($commentId: uuid!) {
	replies: idea_comment_replies(
		where: { commentId: { _eq: $commentId } }
		order_by: { updatedAt: asc }
	) {
		id
		commentId
		value
		updatedAt
		user {
			...UserFieldsWithEmail
		}
	}
}
