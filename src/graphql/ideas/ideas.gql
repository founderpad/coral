#import { UserFieldsWithEmail } from '../fragments/user.gql'

mutation CreateIdea($idea: ideas_insert_input!) {
	idea: insert_ideas_one(object: $idea) {
		id
		name
	}
}

mutation UpdateIdea($idea: ideas_set_input!, $id: uuid!) {
	update_ideas_by_pk(pk_columns: { id: $id }, _set: $idea) {
		id
		name
		summary
		description
		field
		competitors
		team
		additionalInformation
		isPublished
		userId
		status
	}
}

mutation DeleteIdea($id: uuid!) {
	delete_ideas_by_pk(id: $id) {
		id
	}
}

mutation CreateInterestedIdea($ideaId: uuid!, $targetUserId: uuid!) {
	addInterestedIdea: insert_interested_ideas_one(
		object: { ideaId: $ideaId, targetUserId: $targetUserId }
	) {
		ideaId
	}
	# updateIdeaTotalInterested: update_ideas_by_pk(
	# 	pk_columns: { id: $ideaId }
	# 	_inc: { totalInterested: 1 }
	# ) {
	# 	id
	# }
}

query Ideas(
	$where: idea_preview_bool_exp
	$limit: Int
	$offset: Int
	$orderBy: [idea_preview_order_by!]
	$userId: uuid!
) {
	idea_preview_aggregate(where: $where) {
		aggregate {
			count
		}
	}
	idea_preview(
		where: $where
		limit: $limit
		offset: $offset
		order_by: $orderBy
	) {
		...IdeaPreviewFields
	}
}

fragment BoostedIdeaFields on boosted_ideas {
	ideaId
	totalCurrencyAmount
	remainingCurrencyAmount
	createdAt
	idea {
		name
		summary
		status
		field
	}
}

fragment IdeaPreviewFields on idea_preview {
	id
	name
	field
	status
	createdAt
	isNew
	isPublished
	summary
	userId
	user {
		...UserFieldsWithEmail
	}
	votes_aggregate {
		aggregate {
			count(columns: id)
		}
	}
	comments_aggregate {
		aggregate {
			count(columns: id)
		}
	}
	interested_aggregate {
		aggregate {
			count(columns: id)
		}
	}
	votes(where: { userId: { _eq: $userId } }) {
		id
	}
}

query UserIdeas($userId: uuid!) {
	# user_ideas: ideas(
	# 	where: { userId: { _eq: $userId } }
	# 	order_by: { createdAt: desc }
	# ) {
	# 	id
	# 	name
	# 	createdAt
	# 	isPublished
	# 	totalInterested
	# 	totalVotes
	# 	totalComments
	# }

	user_ideas: idea_preview(
		where: { userId: { _eq: $userId } }
		order_by: { createdAt: desc }
	) {
		...IdeaPreviewFields
	}
}

fragment IdeaFields on ideas {
	id
	summary
	name
	description
	field
	competitors
	team
	additionalInformation
	isPublished
	userId
	status
	createdAt
	totalInterested
	totalComments
	totalVotes
}

query Idea($id: uuid!, $userId: uuid!) {
	idea: ideas_by_pk(id: $id) {
		...IdeaFields
		user {
			...UserFieldsWithEmail
		}
		votes_aggregate {
			aggregate {
				count(columns: id)
			}
		}
		votes(where: { userId: { _eq: $userId } }) {
			id
		}
		interested_aggregate {
			aggregate {
				count(columns: id)
			}
		}
	}
	hasInterest: interested_ideas_by_pk(ideaId: $id, userId: $userId) {
		...InterestedIdeaFields
	}
}

fragment InterestedIdeaFields on interested_ideas {
	id
	ideaId
	userId
}

# fragment InterestedIdea on interested_ideas {
# 	hasInterest: interested_ideas_by_pk(ideaId: $id, userId: $userId) {
# 		id
# 	}
# }

query IdeaInterestedUsers($ideaId: uuid!) {
	interested_users: interested_ideas(
		where: { ideaId: { _eq: $ideaId } }
		order_by: { createdAt: desc }
	) {
		id
		createdAt
		user {
			...UserFieldsWithEmail
		}
	}
}

mutation InsertIdeaUpvote($idea_vote: idea_votes_insert_input!) {
	insert_idea_votes_one(object: $idea_vote) {
		id
		ideaId
	}
}

mutation DeleteIdeaUpvote($ideaId: uuid!, $userId: uuid!) {
	delete_idea_votes(
		where: { userId: { _eq: $userId }, ideaId: { _eq: $ideaId } }
	) {
		affected_rows
	}
}

query BoostedIdeas($limit: Int, $offset: Int) {
	boosted_ideas(limit: 10, offset: 0) {
		...BoostedIdeaFields
	}
}
