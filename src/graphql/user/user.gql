#import { UserFieldsWithEmail } from '../fragments/user.gql'

query UserSocials($id: uuid!) {
	profile: user_profile_by_pk(id: $id) {
		linkedin
		twitter
		website
	}
}

query UserProfileDetails($userId: uuid!) {
	user(id: $userId) {
		displayName
		# location
		# country
		avatarUrl
		createdAt
		lastSeen
		address {
			location
			country
		}
		profile {
			availability
			background
			status
			startups
			businessDescription
			specialistIndustry
			statement
			skills
			objective
		}
	}
}

query User($userId: uuid!) {
	user(id: $userId) {
		...UserFieldsWithEmail
		createdAt
		lastSeen
		profile {
			id
			isComplete
		}
	}
}

query Users(
	$where: user_profile_bool_exp
	$limit: Int
	$offset: Int
	$orderBy: [user_profile_order_by!]
) {
	user_profile_aggregate(where: $where) {
		aggregate {
			count
		}
	}
	user_profile(
		where: $where
		limit: $limit
		offset: $offset
		order_by: $orderBy
	) {
		id
		startups
		user {
			displayName
			createdAt
			id
			address {
				location
				country
			}
		}
		specialistIndustry
		availability
		status
		skills
		objective
	}
}

mutation UpdateUserProfile($id: uuid!, $user_profile: user_profile_set_input!) {
	update_user_profile_by_pk(pk_columns: { id: $id }, _set: $user_profile) {
		id
		availability
		objective
		background
		linkedin
		twitter
		instagram
		facebook
		resume
		statement
		status
		businessDescription
		startups
		website
		skills
		isComplete
		specialistIndustry
		updatedAt
	}
}

query UserExperience($id: uuid!) {
	profile: user_profile_by_pk(id: $id) {
		id
		userId
		objective
		background
		statement
		startups
		status
		availability
		businessDescription
		specialistIndustry
		skills
		resume
		linkedin
		twitter
		instagram
		facebook
		website
		updatedAt
		isComplete
	}
}

mutation UpdateUserExperience(
	$id: uuid!
	$userExperience: user_profile_set_input!
) {
	update_user_profile_by_pk(pk_columns: { id: $id }, _set: $userExperience) {
		id
		userId
		background
		statement
		startups
		status
		skills
		availability
		resume
		businessDescription
		objective
	}
}

mutation UpdateResume($id: uuid!, $resume: user_profile_set_input!) {
	update_user_profile_by_pk(pk_columns: { id: $id }, _set: $resume) {
		id
		resume
	}
}

# mutation UpdateUserPersonalDetails(
# 	$id: uuid!
# 	$userPersonalDetails: users_set_input!
# ) {
# 	user: updateUser(pk_columns: { id: $id }, _set: $userPersonalDetails) {
# 		displayName
# 		# lastName
# 		# location
# 		# country
# 		avatarUrl
# 	}
# }

mutation UpdateUserPersonalDetails(
	$id: uuid!
	$userPersonalDetails: users_set_input!
	$userAddress: user_address_set_input!
) {
	updateUser(pk_columns: { id: $id }, _set: $userPersonalDetails) {
		displayName
	}

	updateUserAddress: update_user_address_by_pk(
		pk_columns: { userId: $id }
		_set: $userAddress
	) {
		country
		location
	}
}

mutation UpdateUserAvatar($id: uuid!, $userDetails: users_set_input!) {
	user: updateUser(pk_columns: { id: $id }, _set: $userDetails) {
		avatarUrl
	}
}
